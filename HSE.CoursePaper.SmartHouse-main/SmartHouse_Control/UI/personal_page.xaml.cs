using System;
using System.Data;
using System.Drawing.Imaging;
using System.Globalization;
using System.IO;
using System.Text.RegularExpressions;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Forms;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using SmartHouse_Control.InfoS;
using SmartHouse_Control.Properties;
using SmartHouse_Control.Session;
using SmartHouse_Control.UI.controls;
using KeyEventArgs = System.Windows.Input.KeyEventArgs;
using OpenFileDialog = Microsoft.Win32.OpenFileDialog;

namespace SmartHouse_Control.UI
{
    /// <summary>
    ///     Логика взаимодействия для personal_page.xaml
    /// </summary>
    public partial class personal_page : Window, IUser
    {
        /// <summary>
        ///     User
        /// </summary>
        public user user_obj { get; set; }

        #region Start visual

        public personal_page(user source) {
            user_obj = new user(source);
            path_to_avatar = user_obj.set_avatar;
            InitializeComponent();
        }

        //Load window
        private void Window_Loaded(object sender, RoutedEventArgs e) {
            var array = new[] {user_access, user_name, user_work, user_address, user_mail, user_phone};

            foreach (var i in array) i.Placeholder = "Enter info...";

            set_info();
            activate();
            mistake.Visibility = Visibility.Hidden;
        }

        //Generate columns
        private void Info_AutoGeneratedColumns(object sender, EventArgs e) {
            for (var i = 0; i < info.Columns.Count; ++i)
                info.Columns[i].Width = new DataGridLength(1, DataGridLengthUnitType.Star);
        }

        #endregion

        #region Visual for change info

        /// <summary>
        ///     Is change info in active
        /// </summary>
        private bool is_activated = true;

        //Make places readonly
        private void activate() {
            var array = new[] {user_access, user_name, user_work, user_address, user_mail, user_phone};

            foreach (var i in array) {
                i.BorderBrush = Brushes.Transparent;
                i.BorderThickness = new Thickness(0);
                i.IsReadOnly = true;
                if (i.TextWithoutPlaceholder == "") i.IsPlaceholderShowing = false;
            }

            is_activated = true;
        }

        //Make writing in places
        private void diactivate() {
            var array = new[] {user_name, user_work, user_address, user_mail, user_phone};

            foreach (var i in array) {
                i.BorderBrush = Brushes.Black;
                i.BorderThickness = new Thickness(1);
                i.IsReadOnly = false;
                if (i.TextWithoutPlaceholder == "") i.IsPlaceholderShowing = true;
            }

            is_activated = false;
        }

        //Change picture on bttn.settings
        private void change_btth(string path) {
            user_new_settings.Content = FindResource(path);
        }

        //Event setting allow/not allow
        private void User_new_settings_Click(object sender, RoutedEventArgs e) {
            //Is form activated?
            if (is_activated) {
                diactivate();
                set_info();
                change_btth("accept");
            }
            else {
                activate();
                new_info();
                change_btth("new_settings");
            }
        }

        #endregion

        #region Parse info for/from db

        //Change password
        private void User_change_password_Click(object sender, RoutedEventArgs e) {
            var mistake_text = "Введенные пароли не совпадают";
            var change_text = "Пароль изменен успешно";
            if (user_old_password.Password == user_obj.set_password) {
                user_obj.set_password = user_new_password.Password;
                mistake.Text = change_text;
                mistake.Foreground = Brushes.Green;
            }
            else {
                mistake.Text = mistake_text;
                mistake.Foreground = Brushes.Red;
            }

            mistake.Visibility = Visibility.Visible;
        }

        //Send new info to db
        private void new_info() {
            var mistake_person = false;
            var mistake_mail = false;
            var mistake_phone = false;

            char[] splitters = {' '};
            var fio = user_name.TextWithoutPlaceholder.Split(splitters); //Split text for name, second_name, last_name
            if (fio.Length < 2) mistake_person = true;

            var regex_mail = new Regex(@"^.+@.+\..+$");
            if (!regex_mail.IsMatch(user_mail.TextWithoutPlaceholder)) mistake_mail = true;

            if (user_phone.TextWithoutPlaceholder.Length != 11) mistake_phone = true;

            if (mistake_mail || mistake_person || mistake_phone) {
                mistake_fio.IsOpen = true;
                this.mistake_mail.IsOpen = true;
                this.mistake_phone.IsOpen = true;
                set_info();
                return;
            }

            if (fio.Length == 3) {
                user_obj.set_name = fio[1];
                user_obj.set_second_name = fio[0];
                user_obj.set_last_name = fio[2];
            }

            if (fio.Length == 2) {
                user_obj.set_name = fio[1];
                user_obj.set_second_name = fio[0];
                user_obj.set_last_name = "";
            }


            user_obj.set_address = user_address.TextWithoutPlaceholder;
            user_obj.set_phone = user_phone.TextWithoutPlaceholder;
            user_obj.set_mail = user_mail.TextWithoutPlaceholder;
            user_obj.set_organisation = user_work.TextWithoutPlaceholder;


            save_image();
        }

        //Get info to form
        private void set_info() {
            //Set personal info
            user_name.Text = user_obj.get_fio;


            user_address.Text = user_obj.set_address;
            user_access.Text = user_obj.get_access;
            user_phone.Text = user_obj.set_phone;
            user_mail.Text = user_obj.set_mail;
            user_work.Text = user_obj.set_organisation;

            //Set table
            var rooms = user_obj.get_table;
            var dt = new DataTable();
            dt.Columns.Add("Поменещение");
            dt.Columns.Add("Уровень доступа");
            foreach (var each_room in rooms) dt.Rows.Add(each_room.get_name, each_room.get_access);

            info.AutoGenerateColumns = true;
            info.ItemsSource = dt.DefaultView;
            info.CanUserAddRows = false;
            info.CanUserDeleteRows = false;
            info.CanUserReorderColumns = false;
            info.IsReadOnly = true;
            //dt.Dispose();
        }

        #endregion

        #region Right input

        #region Checks Chars

        /// <summary>
        ///     Check char input
        /// </summary>
        /// <param name="c">Char</param>
        /// <returns></returns>
        private bool is_char(char c) {
            if (c >= 'а' && c <= 'я')
                return true;
            if (c >= 'А' && c <= 'Я')
                return true;
            if (InputLanguage.CurrentInputLanguage.LayoutName == "Русская")
                if (c == 219 || c == 190 || c == 186 || c == 222 || c == 188 || c == 221)
                    return true;
            return false;
        }

        /// <summary>
        ///     Check number of spaces
        /// </summary>
        /// <param name="input_str">Input string for checking amount of spaces</param>
        /// <returns></returns>
        private bool is_spaces(string input_str) {
            if (input_str.Split(' ').Length <= 3) return true;

            return false;
        }

        /// <summary>
        ///     Check english char
        /// </summary>
        /// <param name="c">Char</param>
        /// <returns></returns>
        private bool is_en_char(char c, bool ok) {
            if (c >= 'a' && c <= 'z')
                return true;
            if (c >= 'A' && c <= 'Z')
                return true;
            if (c == '2' && ok)
                return true;
            if (InputLanguage.CurrentInputLanguage.LayoutName == "Русская")
                if (c == 219 || c == 190 || c == 186 || c == 222 || c == 188 || c == 221)
                    return true;

            return false;
        }

        /// <summary>
        ///     if input space
        /// </summary>
        /// <param name="c">Input char</param>
        /// <returns></returns>
        private bool is_space(char c) {
            if (c == ' ')
                return true;

            return false;
        }

        /// <summary>
        ///     Delete or back bttn
        /// </summary>
        /// <param name="key">Key</param>
        /// <returns></returns>
        private bool is_delete_or_back(Key key) {
            if (key == Key.Delete || key == Key.Back) return true;

            return false;
        }

        /// <summary>
        ///     Check number
        /// </summary>
        /// <param name="c">Char</param>
        /// <returns></returns>
        private bool is_number(char c) {
            if (c >= '0' && c <= '9')
                return true;

            return false;
        }

        #endregion

        //Check right input
        private void PreviewKeyDown(object sender, KeyEventArgs e) {
            var input = (char) KeyInterop.VirtualKeyFromKey(e.Key);
            switch ((sender as TextField)?.Name) {
                case "user_name": {
                    e.Handled = !(is_en_char(input, false) || is_delete_or_back(e.Key) || is_space(input)) ||
                                !is_spaces(user_name.TextWithoutPlaceholder + input);
                    break;
                }
                case "user_phone": {
                    e.Handled = (!(is_number(input) || is_space(input)) ||
                                 user_phone.TextWithoutPlaceholder.Length >= 11) && !is_delete_or_back(e.Key);
                    break;
                }
                case "user_mail": {
                    e.Handled = !(is_en_char(input, e.KeyboardDevice.Modifiers == ModifierKeys.Shift) ||
                                  is_space(input) || is_delete_or_back(e.Key));
                    break;
                }
                case "user_address": {
                    e.Handled = !(is_en_char(input, false) || is_number(input) || is_delete_or_back(e.Key) ||
                                  is_space(input));
                    break;
                }
                case "user_work": {
                    e.Handled = !(is_en_char(input, false) || is_number(input) || is_delete_or_back(e.Key) ||
                                  is_space(input));
                    break;
                }
            }
        }

        #endregion

        #region Image parse

        /// <summary>
        ///     Path to file
        /// </summary>
        public object path_to_avatar { get; set; }

        /// <summary>
        ///     Save image to db
        /// </summary>
        private void save_image() {
            var bs = user_avatar.Source as BitmapSource;
            BitmapEncoder be = new JpegBitmapEncoder();
            be.Frames.Add(BitmapFrame.Create(bs));
            byte[] data;
            using (var ms = new MemoryStream()) {
                be.Save(ms);
                data = ms.ToArray();
            }

            user_obj.set_avatar = data;
        }

        //Press on picture
        private void User_avatar_MouseLeftButtonDown(object sender, MouseButtonEventArgs e) {
            var fileDialog = new OpenFileDialog();
            fileDialog.Filter = "Аватар (PNG)|*.png|Авaтар (JPG)|*.jpeg";

            if (fileDialog.ShowDialog() == true) {
                user_avatar.Source = new BitmapImage(new Uri(fileDialog.FileName));
                save_image();
            }
        }

        #endregion

        #region Exit personal page

        //If window was closed
        private void Window_Closing(object sender, EventArgs e) {
            ((main_menu) Owner).is_active_personal_page = false;
        }

        private void Mistake_phone_Closed(object sender, EventArgs e) {
            mistake_fio.IsOpen = false;
            mistake_mail.IsOpen = false;
        }

        #endregion
    }

    #region ConverterToBitmap

    public class ImagePathConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture) {
            var bytes = (byte[]) value;
            var bitmap = new BitmapImage();
            bitmap.BeginInit();
            if (bytes == null) {
                var ms = new MemoryStream();
                resource_base.base_avatar.Save(ms, ImageFormat.Bmp);
                ms.Seek(0, SeekOrigin.Begin);
                bitmap.StreamSource = ms;
            }
            else {
                bitmap.StreamSource = new MemoryStream(bytes);
            }

            bitmap.EndInit();
            return bitmap;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture) {
            return null;
        }
    }

    #endregion
}