using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Runtime.CompilerServices;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using SmartHouse_Control.Annotations;
using SmartHouse_Control.Handlers;
using SmartHouse_Control.Session;

namespace SmartHouse_Control.UI
{
    /// <summary>
    ///     Логика взаимодействия для filter_menu.xaml
    /// </summary>
    public partial class filter_menu : Window
    {
        #region Exit

        //Close window
        private void Window_Closing(object sender, CancelEventArgs e) {
            ((main_menu) Owner).is_active_menu = false;
        }

        #endregion

        #region Fields

        private bool entering = true; //if openning window

        /// <summary>
        ///     Class for the data
        /// </summary>
        private class Data : INotifyPropertyChanged
        {
            private bool is_active;
            public int id { get; set; }
            public string name { get; set; }
            public string group { get; set; }
            public string status { get; set; }
            public string value { get; set; }

            public bool is_enabled {
                get => is_active;
                set {
                    is_active = value;
                    OnPropertyChanged();
                }
            }

            public event PropertyChangedEventHandler PropertyChanged;

            [NotifyPropertyChangedInvocator]
            protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = "") {
                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private readonly List<room> rooms = new List<room>(); //Set info

        private int current_room; //Current room

        #endregion

        #region Start visual

        public filter_menu(List<room> _rooms) {
            InitializeComponent();

            foreach (var room in _rooms) rooms.Add(room);
        }

        //load window
        private void Window_Loaded(object sender, RoutedEventArgs e) {
            ev_set += (Owner as main_menu).set_new_settings;
            ev_set += subscribe.new_settings;
            get_grid += subscribe.get_grid_room;
            get_groups += subscribe.get_groups;
            update += subscribe.update_status;
            input.IsEnabled = false;
            output.IsEnabled = false;

            foreach (var r in rooms) {
                var ci = new ComboBoxItem
                    {
                        Content = r.get_name
                    };
                room_box.Items.Add(ci);
            }

            status.IsEnabled = false;

            var groups = OnGroups();

            foreach (var group in groups) {
                var cb = new CheckBox
                    {
                        Content = group,
                        IsChecked = true
                    };
                cb.Checked += CbOnChecked;
                cb.Unchecked += CbOnUnchecked;
                this.group.Items.Add(cb);
            }
        }

        //Change visual/new room sensor
        private void Room_box_SelectionChanged(object sender, SelectionChangedEventArgs e) {
            status.IsEnabled = true;

            var comboBox = sender as ComboBox;

            var index = room_box.Items.IndexOf(room_box.SelectedItem);

            current_room = index;

            if (status.Text == "Все") entering = true;

            status.SelectedIndex = 0;

            if (entering) {
                var dt = OnGetGrid(rooms[index].get_room_id, status.Text, is_open_sensors() ? "Открытие" : null);
                FillGrid(dt);
            }

            entering = false;
            if (info.Items.Count != 0) {
                output.IsEnabled = true;
                input.IsEnabled = true;
            }
            else {
                input.IsEnabled = false;
                output.IsEnabled = false;
            }
        }

        private void Info_AutoGeneratedColumns(object sender, EventArgs e) {
            for (var i = 0; i < info.Columns.Count; ++i)
                info.Columns[i].Width = new DataGridLength(1, DataGridLengthUnitType.Star);
        }

        /// <summary>
        ///     Fill grid
        /// </summary>
        /// <param name="dt"></param>
        /// <param name="index"></param>
        private void FillGrid(DataTable dt) {
            info.Items.Clear();

            for (var i = 0; i < dt.Rows.Count; ++i)
                info.Items.Add(
                    new Data
                        {
                            id = int.Parse(dt.Rows[i].ItemArray[0].ToString()),
                            name = dt.Rows[i].ItemArray[1].ToString(),
                            group = dt.Rows[i].ItemArray[2].ToString(),
                            status = dt.Rows[i].ItemArray[3].ToString(),
                            value = dt.Rows[i].ItemArray[4].ToString(),
                            is_enabled = dt.Rows[i].ItemArray[3].ToString() == "Включен"
                        });
            info.AutoGenerateColumns = true;
            info.CanUserAddRows = false;
            info.CanUserDeleteRows = false;
            info.CanUserReorderColumns = false;
            info.CanUserSortColumns = false;
            //dt.Dispose();
        }

        #endregion

        #region Delegates

        #region Set new settings

        /// <summary>
        ///     Delegate for the new settings
        /// </summary>
        /// <param name="new_settings"></param>
        private delegate void set_new_settings(int id, string new_settings, params int[] id_room);

        private event set_new_settings ev_set;

        /// <summary>
        ///     Set new settings
        /// </summary>
        /// <param name="new_settings"></param>
        private void OnSet(int id, string new_settings, int type) {
            ev_set?.Invoke(id, new_settings, rooms[id].get_room_id, type);
        }

        #endregion

        #region Getting start info

        /// <summary>
        ///     Get groups for the
        /// </summary>
        /// <returns></returns>
        private delegate string[] groups();

        private event groups get_groups;

        //Get groups
        private string[] OnGroups() {
            return get_groups?.Invoke();
        }

        #endregion

        #region Getting sensors from the room

        /// <summary>
        ///     Delegate for getting room id
        /// </summary>
        /// <param name="id_room">Id room</param>
        /// <returns></returns>
        private delegate DataTable Grid(int id_room, params string[] clauses);

        private event Grid get_grid;

        //Get grid
        private DataTable OnGetGrid(int id_room, params string[] clauses) {
            return get_grid?.Invoke(id_room, clauses);
        }

        #endregion

        #region Update status sensor

        /// <summary>
        ///     Delegate for updating status
        /// </summary>
        /// <param name="id">Id sensor</param>
        /// <param name="new_status">new status</param>
        private delegate void StatusHandler(int id, string new_status);

        private event StatusHandler update;

        /// <summary>
        ///     Update status
        /// </summary>
        /// <param name="id"></param>
        /// <param name="new_status"></param>
        private void OnUpdate(int id, string new_status) {
            update?.Invoke(id, new_status);
        }

        #endregion

        #endregion

        #region Files

        private void Input_Click(object sender, RoutedEventArgs e) {
            var dt = new DataTable();

            dt.Columns.Add("Наименование");
            dt.Columns.Add("Семейство");
            dt.Columns.Add("Состояние");
            dt.Columns.Add("Значение");

            foreach (var item in info.Items)
                dt.Rows.Add(
                    (item as Data).name,
                    (item as Data).group,
                    (item as Data).status,
                    (item as Data).value
                );


            dt = subscribe.load_room_settings(dt);

            if (dt == null) {
                MessageBox.Show("Ошибка в входных данных!", "Ошибка", MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }

            info.Items.Clear();
            for (var i = 0; i < dt.Rows.Count; ++i) {
                info.Items.Add(
                    new Data
                        {
                            name = dt.Rows[i][0].ToString(),
                            group = dt.Rows[i][1].ToString(),
                            status = dt.Rows[i][2].ToString(),
                            value = dt.Rows[i][3].ToString(),
                            is_enabled = dt.Rows[i][2].ToString() == "Включен"
                        }
                );
                OnUpdate(current_room, dt.Rows[i][2].ToString());

                var curr_sett = rooms[current_room].Settings;
                var new_sett = "";
                if ("Дверь входная" == dt.Rows[i][0].ToString()) {
                    new_sett = dt.Rows[i][3].ToString();
                    new_sett = string.Concat(new_sett, curr_sett[1], curr_sett[2]);
                    OnSet(current_room, new_sett, 0);
                }

                if ("Дверь прмоежуточная" == dt.Rows[i][0].ToString()) {
                    new_sett = dt.Rows[i][3].ToString();
                    new_sett = string.Concat(curr_sett[0], new_sett, curr_sett[2]);
                    OnSet(current_room, new_sett, 1);
                }

                if ("Окно" == dt.Rows[i][0].ToString()) {
                    new_sett = dt.Rows[i][3].ToString();
                    new_sett = string.Concat(curr_sett[0], curr_sett[1], new_sett);
                    OnSet(current_room, new_sett, 1);
                }
            }
        }

        //Output information
        private void Output_Click(object sender, RoutedEventArgs e) {
            var dt = new DataTable();

            dt.Columns.Add("Наименование");
            dt.Columns.Add("Семейство");
            dt.Columns.Add("Состояние");
            dt.Columns.Add("Значение");

            foreach (var item in info.Items)
                dt.Rows.Add(
                    (item as Data).name,
                    (item as Data).group,
                    (item as Data).status,
                    (item as Data).value
                );

            if (rooms.Count != 0)
                subscribe.output_excel_format_one(rooms[current_room].get_name, dt);
        }

        #endregion

        #region Open qbe

        public bool is_active_menu;

        private void Button_Click(object sender, RoutedEventArgs e) {
            if (!is_active_menu) {
                var qb = new qbe_menu();
                qb.Owner = this;
                qb.Show();
                is_active_menu = true;
            }
        }

        #endregion

        #region Change model setting

        //Change model settings
        private void Selector_OnSelectionChanged(object sender, SelectionChangedEventArgs e) {
            var row = info.ContainerFromElement(sender as ComboBox) as DataGridRow;
            var rowIndex = row.GetIndex();

            (info.Items[rowIndex] as Data).status = ((sender as ComboBox).SelectedItem as TextBlock).Text;
            (info.Items[rowIndex] as Data).is_enabled =
                ((sender as ComboBox).SelectedItem as TextBlock).Text == "Включен";
            if (!(info.Items[rowIndex] as Data).is_enabled)
                row.Background = new SolidColorBrush(Colors.Red);
            else
                row.Background = new SolidColorBrush(Colors.White);

            object obj = info.Columns;

            OnUpdate((info.Items[rowIndex] as Data).id, (info.Items[rowIndex] as Data).status);
        }

        private void Selector_Value_OnSelectionChanged(object sender, SelectionChangedEventArgs e) {
            var row = info.ContainerFromElement(sender as ComboBox) as DataGridRow;
            var rowIndex = row.GetIndex();

            if (e.RemovedItems.Count == 0) {
                (info.Items[rowIndex] as Data).value = ((sender as ComboBox).SelectedItem as TextBlock).Text;
                return;
            }

            if ((info.Items[rowIndex] as Data).status == "Выключен") return;

            (info.Items[rowIndex] as Data).value = ((sender as ComboBox).SelectedItem as TextBlock).Text;

            var curr_sett = rooms[current_room].Settings;
            var new_sett = (info.Items[rowIndex] as Data).value == "Открыто" ? "1" : "0";
            if ("Дверь входная" == (info.Items[rowIndex] as Data).name) {
                new_sett = string.Concat(new_sett, curr_sett[1], curr_sett[2]);
                OnSet(current_room, new_sett, 0);
            }

            if ("Дверь внутренняя" == (info.Items[rowIndex] as Data).name) {
                new_sett = string.Concat(curr_sett[0], new_sett, curr_sett[2]);
                OnSet(current_room, new_sett, 1);
            }

            if ("Окно" == (info.Items[rowIndex] as Data).name) {
                new_sett = string.Concat(curr_sett[0], curr_sett[1], new_sett);
                OnSet(current_room, new_sett, 2);
            }

            rooms[current_room].Settings = new_sett;
        }

        //Load row
        private void Info_LoadingRow(object sender, DataGridRowEventArgs e) {
            if (!(info.Items[e.Row.GetIndex()] as Data).is_enabled)
                e.Row.Background = new SolidColorBrush(Colors.Red);
            else
                e.Row.Background = new SolidColorBrush(Colors.White);
        }

        #endregion

        #region Filters

        /// <summary>
        ///     Check filter about group
        /// </summary>
        /// <returns></returns>
        private bool is_open_sensors() {
            for (var i = group.Items.Count - 1; i >= 0; --i)
                if ((group.Items[i] as CheckBox).Content as string == "Датчик открытия")
                    return true;

            return false;
        }

        //On or off sensors
        private void Status_OnSelectionChanged(object sender, SelectionChangedEventArgs e) {
            if (room_box.Text != null) {
                var dt = OnGetGrid(rooms[current_room].get_room_id,
                    ((sender as ComboBox).SelectedItem as ComboBoxItem).Content as string,
                    is_open_sensors() ? "Открытие" : null);
                FillGrid(dt);
            }
        }

        private void CbOnUnchecked(object sender, RoutedEventArgs e) {
            if ((sender as CheckBox).Content as string == "Датчик открытия") {
                var dt = OnGetGrid(rooms[current_room].get_room_id, status.Text, null);
                FillGrid(dt);
            }
        }

        private void CbOnChecked(object sender, RoutedEventArgs e) {
            if ((sender as CheckBox).Content as string == "Датчик открытия") {
                var dt = OnGetGrid(rooms[current_room].get_room_id, status.Text, is_open_sensors() ? "Открытие" : null);
                FillGrid(dt);
            }
        }

        #endregion
    }
}